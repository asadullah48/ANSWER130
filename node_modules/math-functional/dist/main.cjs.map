{"version":3,"sources":["lib/utils.js","lib/basic/operations.js","lib/basic/parity.js","lib/basic/index.js","lib/algebra/quadratic.js","lib/algebra/primality.js","lib/algebra/index.js","main.js"],"names":["MIN_ARRAY_SIZE","__getNormalizedArraySize","size","minSize","__emptyArray","Array","bulkFunction","operation","list","initialValue","reduce","getRandomPositiveNumber","limit","Math","floor","random","getRandomNegativeNumber","getRandomPositiveArray","from","_","getRandomNegativeArray","getRandomMixedArray","index","generateIntegerArray","init","end","abs","add","addend1","addend2","sum","parts","sub","minuend","subtrahend","diff","multiply","multiplicand","multiplier","product","divide","dividend","divisor","quotient","isOdd","number","isEven","discriminant","a","b","c","root","delta","sqrt","solve","map","getRelevantPossibleDivisors","parseInt","isPrime","every","divisorCandidate"],"mappings":"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","file":"main.cjs","sourceRoot":"..","sourcesContent":["const MIN_ARRAY_SIZE = 4\n\nconst __getNormalizedArraySize = (size = MIN_ARRAY_SIZE, minSize = MIN_ARRAY_SIZE) =>\n    size > minSize ? size : minSize\n\nconst __emptyArray = (size = MIN_ARRAY_SIZE) =>\n    Array(__getNormalizedArraySize(size))\n\nconst bulkFunction = (operation, list, initialValue) =>\n    list.reduce(operation, initialValue)\n\nconst getRandomPositiveNumber = (limit = 10) =>\n    (Math.floor(Math.random() * limit) + 1)\n\nconst getRandomNegativeNumber = (limit = 10) =>\n    (getRandomPositiveNumber(limit) * - 1)\n\nconst getRandomPositiveArray = (limit = 10, size = MIN_ARRAY_SIZE) =>\n    Array.from(__emptyArray(size), _ => getRandomPositiveNumber(limit))\n\nconst getRandomNegativeArray = (limit = 10, size = MIN_ARRAY_SIZE) =>\n    Array.from(__emptyArray(size), _ => getRandomNegativeNumber(limit))\n\nconst getRandomMixedArray = (limit = 10, size = MIN_ARRAY_SIZE) =>\n    Array.from(__emptyArray(size), (_,index) =>\n        ((index*limit) % 3 === 0) ?\n            getRandomPositiveNumber(limit) :\n            getRandomNegativeNumber(limit))\n\nconst generateIntegerArray = (init = 0, end = 1) =>\n    Array.from(Array(Math.abs(end - init) + 1), (_, index) => init + index)\n\nexport {\n    __getNormalizedArraySize,\n    __emptyArray,\n    bulkFunction,\n    getRandomPositiveNumber,\n    getRandomNegativeNumber,\n    getRandomPositiveArray,\n    getRandomNegativeArray,\n    getRandomMixedArray,\n    generateIntegerArray\n}\n","import { bulkFunction } from '../utils.js'\n\nconst add = (addend1, addend2) =>\n    addend1 + addend2\n\nconst sum = (...parts) =>\n    bulkFunction(add, parts, 0)\n\nconst sub = (minuend, subtrahend) =>\n    minuend - subtrahend\n\nconst diff = (...parts) =>\n    bulkFunction(sub, parts, 0)\n\nconst multiply = (multiplicand, multiplier) =>\n    multiplicand * multiplier\n\nconst product = (...parts) =>\n    bulkFunction(multiply, parts, 1)\n\nconst divide = (dividend, divisor) =>\n    dividend / divisor\n\nconst quotient = (...parts) =>\n    bulkFunction(divide, parts, multiply(parts[0], parts[0]))\n\n\nexport {\n    add,\n    sum,\n    sub,\n    diff,\n    multiply,\n    product,\n    divide,\n    quotient\n}\n","const isOdd = number =>\n    number % 2 !== 0\n\nconst isEven = number =>\n    number % 2 === 0\n\nexport {\n    isOdd,\n    isEven\n}","import * as operations from './operations.js'\nimport * as parity from './parity.js'\n\nexport {\n    operations,\n    parity\n}\n","import {\n    sum,\n    sub,\n    multiply,\n    product,\n    quotient } from '../basic/operations.js'\n\nconst discriminant = (a, b, c) =>\n    sum(product(b, b), product(-4, a, c))\n\nconst root = (a, b, delta, operation) => \n    quotient(\n        operation(\n            product(b, -1),\n            Math.sqrt(delta)\n        ),\n        multiply(2, a)\n    )\n\nconst solve = (a, b, c) =>\n    [sum, sub]\n    \t.map(operation => \n    \t\troot(a, b, discriminant(a, b, c), operation))\n\nexport {\n\tdiscriminant,\n\troot,\n    solve\n}","import { isEven } from '../basic/parity.js'\nimport { generateIntegerArray } from '../utils.js'\n\nconst getRelevantPossibleDivisors = number =>\n\tgenerateIntegerArray(2, parseInt(Math.sqrt(number)))\n\nconst isPrime = number =>\n\tgetRelevantPossibleDivisors(number)\n\t\t.every(divisorCandidate => number % divisorCandidate !== 0)\n\nexport {\n    getRelevantPossibleDivisors,\n    isPrime\n}\n","import * as quadratic from './quadratic.js'\nimport * as primality from './primality.js'\n\nexport {\n    quadratic,\n    primality\n}\n","import basic from './lib/basic/index.js'\nimport { primality } from './lib/algebra/index.js'\n\nexport {\n    basic,\n\tprimality\n}\n"]}