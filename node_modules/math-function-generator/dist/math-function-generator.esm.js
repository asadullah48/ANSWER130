import { replace, random } from 'lodash-es';

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;

  _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

var MathFunction = /*#__PURE__*/function () {
  function MathFunction() {}

  var _proto = MathFunction.prototype;

  _proto.getEquations = function getEquations() {
    return this.equations;
  };

  _proto.getSubType = function getSubType() {
    return this.subType;
  };

  return MathFunction;
}();

function sanitizeEquationVariances(equationVariances) {
  var sanitizedEquationVariances = equationVariances.map(function (equation) {
    return sanitizeEquation(equation);
  });
  return sanitizedEquationVariances;
}

function sanitizeEquation(equation) {
  var sanitizedEquation = equation;
  sanitizedEquation = replaceMinusMinus(sanitizedEquation);
  sanitizedEquation = replacePlusPlus(sanitizedEquation);
  sanitizedEquation = replacePlusMinus(sanitizedEquation);
  sanitizedEquation = replaceMinusPlus(sanitizedEquation);
  sanitizedEquation = replaceOne(sanitizedEquation);
  return sanitizedEquation;
}

function replaceMinusPlus(equation) {
  return replace(equation, /\-\040*\+/gim, '- ');
}

function replacePlusMinus(equation) {
  return replace(equation, /\+\040*\-/gim, '- ');
}

function replacePlusPlus(equation) {
  return replace(equation, /\+\040*\+/gim, '+ ');
}

function replaceMinusMinus(equation) {
  return replace(equation, /\-\040*\-/gim, '+ ');
}

function replaceOne(equation) {
  return replace(equation, /1(?=[A-Za-z(])]/gim, '');
}

var LinearFunction = /*#__PURE__*/function (_MathFunction) {
  _inheritsLoose(LinearFunction, _MathFunction);

  function LinearFunction(_temp) {
    var _this;

    var _ref = _temp === void 0 ? {} : _temp,
        _ref$subType = _ref.subType,
        subType = _ref$subType === void 0 ? 'SLOPE-INTERCEPT' : _ref$subType,
        _ref$randRange = _ref.randRange,
        randRange = _ref$randRange === void 0 ? {
      min: 10,
      max: 20
    } : _ref$randRange;

    _this = _MathFunction.call(this) || this;

    switch (subType) {
      case 'POINT-SLOPE':
        _this.equations = _this.generatePointSlopeVariances(randRange);
        break;

      case 'STANDARD':
        _this.equations = _this.generateStandardVariances(randRange);
        break;

      case 'SLOPE-INTERCEPT':
        _this.equations = _this.generateSlopeInterceptVariances(randRange);
        break;

      default:
        _this.equations = _this.generateSlopeInterceptVariances(randRange);
    }

    _this.equations = sanitizeEquationVariances(_this.equations);
    _this.subType = subType;
    return _this;
  }

  var _proto = LinearFunction.prototype;

  _proto.generateSlopeInterceptVariances = function generateSlopeInterceptVariances(randRange) {
    var m = random(randRange.min, randRange.max, false);
    var b = random(randRange.min, randRange.max, false);
    var equationVariances = ["y = " + m + "x + " + b, "y = " + m + "x + " + b * -1, "y = " + m * -1 + "x + " + b, "y = " + m * -1 + "x - " + b * -1];
    return equationVariances;
  };

  _proto.generatePointSlopeVariances = function generatePointSlopeVariances(randRange) {
    var m = random(randRange.min, randRange.max, false);
    var y1 = random(randRange.min, randRange.max, false);
    var x1 = random(randRange.min, randRange.max, false);
    var equationVariances = ["y - " + y1 + " = " + m * -1 + "(x - " + x1 + ")", "y - " + y1 * -1 + " = " + m + "(x - " + x1 + ")", "y - " + y1 + " = " + m + "(x - " + x1 * -1 + ")", "y - " + y1 * -1 + " = " + m + "(x - " + x1 * -1 + ")"];
    return equationVariances;
  };

  _proto.generateStandardVariances = function generateStandardVariances(randRange) {
    var a = random(randRange.min, randRange.max, false);
    var b = random(randRange.min, randRange.max, false);
    var c = random(randRange.min, randRange.max, false);
    var equationVariances = [a + "x + " + b + "y = " + c, a * -1 + "x + " + b + "y = " + c, a + "x + " + b * -1 + "y = " + c, a * -1 + "x + " + b * -1 + "y = " + c];
    return equationVariances;
  };

  return LinearFunction;
}(MathFunction);

var QuadraticFunction = /*#__PURE__*/function (_MathFunction) {
  _inheritsLoose(QuadraticFunction, _MathFunction);

  function QuadraticFunction(_temp) {
    var _this;

    var _ref = _temp === void 0 ? {} : _temp,
        _ref$subType = _ref.subType,
        subType = _ref$subType === void 0 ? 'STANDARD' : _ref$subType,
        _ref$randRange = _ref.randRange,
        randRange = _ref$randRange === void 0 ? {
      min: 10,
      max: 20
    } : _ref$randRange;

    _this = _MathFunction.call(this) || this;

    switch (subType) {
      case 'STANDARD':
        _this.equations = _this.generateStandardVariances(randRange);
        break;

      case 'VERTEX':
        _this.equations = _this.generateVertexVariances(randRange);
        break;

      case 'FACTORED':
        _this.equations = _this.generateFactoredVariances(randRange);
        break;

      default:
        _this.equations = _this.generateStandardVariances(randRange);
    }

    _this.equations = sanitizeEquationVariances(_this.equations);
    _this.subType = subType;
    return _this;
  }

  var _proto = QuadraticFunction.prototype;

  _proto.generateStandardVariances = function generateStandardVariances(randRange) {
    var a = random(randRange.min, randRange.max, false);
    var b = random(randRange.min, randRange.max, false);
    var c = random(randRange.min, randRange.max, false);
    var variances = ["y = " + a + "x^2 + " + b + "x + " + c, "y = " + a * -1 + "x^2 + " + b + "x + " + c, "y = " + a + "x^2 + " + b * -1 + "x + " + c, "y = " + a + "x^2 + " + b + "x + " + c * -1, "y = " + a * -1 + "x^2 + " + b * -1 + "x + " + c * -1];
    return variances;
  };

  _proto.generateVertexVariances = function generateVertexVariances(randRange) {
    var a = random(randRange.min, randRange.max, false);
    var h = random(randRange.min, randRange.max, false);
    var k = random(randRange.min, randRange.max, false);
    var variances = ["y = " + a + "(x - " + h + ")^2 + " + k, "y = " + a * -1 + "(x - " + h + ")^2 + " + k, "y = " + a + "(x - " + h * -1 + ")^2 + " + k, "y = " + a + "(x - " + h * -1 + ")^2 + " + k * -1];
    return variances;
  };

  _proto.generateFactoredVariances = function generateFactoredVariances(randRange) {
    var a = random(randRange.min, randRange.max, false);
    var p = random(randRange.min, randRange.max, false);
    var q = random(randRange.min, randRange.max, false);
    var variances = ["y = " + a + "(x + " + p + ")(x + " + q + ")", "y = " + a * -1 + "(x + " + p + ")(x + " + q + ")", "y = " + a + "(x + " + p * -1 + ")(x + " + q * -1 + ")", "y = " + a * -1 + "(x + " + p * -1 + ")(x + " + q * -1 + ")"];
    return variances;
  };

  return QuadraticFunction;
}(MathFunction);

var TrigonometricFunction = /*#__PURE__*/function (_MathFunction) {
  _inheritsLoose(TrigonometricFunction, _MathFunction);

  function TrigonometricFunction(_temp) {
    var _this;

    var _ref = _temp === void 0 ? {} : _temp,
        _ref$subType = _ref.subType,
        subType = _ref$subType === void 0 ? 'SIN' : _ref$subType,
        _ref$randRange = _ref.randRange,
        randRange = _ref$randRange === void 0 ? {
      min: 10,
      max: 20
    } : _ref$randRange;

    _this = _MathFunction.call(this) || this;
    _this.equations = _this.generateVariances(subType, randRange);
    _this.equations = sanitizeEquationVariances(_this.equations);
    _this.subType = subType;
    return _this;
  }

  var _proto = TrigonometricFunction.prototype;

  _proto.generateVariances = function generateVariances(subType, randRange) {
    var a = random(randRange.min, randRange.max, false);
    var b = random(randRange.min, randRange.max, false);
    var c = random(randRange.min, randRange.max, false);
    var d = random(randRange.min, randRange.max, false);
    var variances = ["y = " + a + " * " + subType.toLowerCase() + "(" + b + "x + " + c + ") + " + d, "y = " + a * -1 + " * " + subType.toLowerCase() + "(" + b + "x + " + c + ") + " + d, "y = " + a + " * " + subType.toLowerCase() + "(" + b + "x + " + c * -1 + ") + " + d, "y = " + a + " * " + subType.toLowerCase() + "(" + b + "x + " + c + "/" + b + ") + " + d];
    return variances;
  };

  return TrigonometricFunction;
}(MathFunction);

export { LinearFunction, QuadraticFunction, TrigonometricFunction };
//# sourceMappingURL=math-function-generator.esm.js.map
